/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// SearchCriteria : Defines search criteria for use within a SearchFilter. Identifies the field of an object to test, the value to test against, and the type of test to perform, such as \\\"equal\"\\ or \\\"greater-than\"\\.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchCriteria {
    /// Name of the field to be tested. Required for all tests except idTest.
    #[serde(rename = "fieldName", skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    /// Boolean test, suitable for boolean fields. Default \"true\".
    #[serde(rename = "booleanTest", skip_serializing_if = "Option::is_none")]
    pub boolean_test: Option<bool>,
    /// Numeric test, suitable for numeric fields, used in conjuction with the numericValue. Default \"equal\".
    #[serde(rename = "numericTest", skip_serializing_if = "Option::is_none")]
    pub numeric_test: Option<NumericTest>,
    /// Value used by the numericTest. Required when performing a numericTest.
    #[serde(rename = "numericValue", skip_serializing_if = "Option::is_none")]
    pub numeric_value: Option<f64>,
    /// String test, suitable for string fields, used in conjuction with the stringValue and stringWildcards. Default \"equal\".
    #[serde(rename = "stringTest", skip_serializing_if = "Option::is_none")]
    pub string_test: Option<StringTest>,
    /// Value used by the stringTest. Required when performing a stringTest.
    #[serde(rename = "stringValue", skip_serializing_if = "Option::is_none")]
    pub string_value: Option<String>,
    /// Controls whether or not wildcard characters (`%` and `_`) are treated as wildcards (true) or regular characters (false). Default \"true\".
    #[serde(rename = "stringWildcards", skip_serializing_if = "Option::is_none")]
    pub string_wildcards: Option<bool>,
    /// Choice test, suitable for enum fields, used in conjuction with the choiceValue. Default \"equal\".
    #[serde(rename = "choiceTest", skip_serializing_if = "Option::is_none")]
    pub choice_test: Option<ChoiceTest>,
    /// Value used by the choiceTest. Required when performing a choiceTest.
    #[serde(rename = "choiceValue", skip_serializing_if = "Option::is_none")]
    pub choice_value: Option<String>,
    /// First (low) date used to find objects within a date range.  Null (the default) implies no lower limit on the date range.
    #[serde(rename = "firstDateValue", skip_serializing_if = "Option::is_none")]
    pub first_date_value: Option<i64>,
    /// Indicates whether the results should include (true) or exclude (false) an exact match for the firstDateValue. Default \"true\".
    #[serde(rename = "firstDateInclusive", skip_serializing_if = "Option::is_none")]
    pub first_date_inclusive: Option<bool>,
    /// Last (high) date used to find objects within a date range.  Null (the default) implies no upper limit on the date range.
    #[serde(rename = "lastDateValue", skip_serializing_if = "Option::is_none")]
    pub last_date_value: Option<i64>,
    /// Indicates whether the results should include (true) or exclude (false) an exact match for the lastDateValue. Default \"true\".
    #[serde(rename = "lastDateInclusive", skip_serializing_if = "Option::is_none")]
    pub last_date_inclusive: Option<bool>,
    /// Null test, suitable for finding fields containing a null value.
    #[serde(rename = "nullTest", skip_serializing_if = "Option::is_none")]
    pub null_test: Option<bool>,
    /// Version test, suitable for version fields, used in conjuction with the versionValue. Default \"equal\".
    #[serde(rename = "versionTest", skip_serializing_if = "Option::is_none")]
    pub version_test: Option<VersionTest>,
    /// Value used by the versionTest. Required when performing a versionTest.
    #[serde(rename = "versionValue", skip_serializing_if = "Option::is_none")]
    pub version_value: Option<String>,
    #[serde(rename = "idValue", skip_serializing_if = "Option::is_none")]
    pub id_value: Option<i64>,
    #[serde(rename = "idTest", skip_serializing_if = "Option::is_none")]
    pub id_test: Option<IdTest>,
}

impl SearchCriteria {
    /// Defines search criteria for use within a SearchFilter. Identifies the field of an object to test, the value to test against, and the type of test to perform, such as \\\"equal\"\\ or \\\"greater-than\"\\.
    pub fn new() -> SearchCriteria {
        SearchCriteria {
            field_name: None,
            boolean_test: None,
            numeric_test: None,
            numeric_value: None,
            string_test: None,
            string_value: None,
            string_wildcards: None,
            choice_test: None,
            choice_value: None,
            first_date_value: None,
            first_date_inclusive: None,
            last_date_value: None,
            last_date_inclusive: None,
            null_test: None,
            version_test: None,
            version_value: None,
            id_value: None,
            id_test: None,
        }
    }
}

/// Numeric test, suitable for numeric fields, used in conjuction with the numericValue. Default \"equal\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NumericTest {
    #[serde(rename = "less-than")]
    LessThan,
    #[serde(rename = "less-than-or-equal")]
    LessThanOrEqual,
    #[serde(rename = "equal")]
    Equal,
    #[serde(rename = "greater-than-or-equal")]
    GreaterThanOrEqual,
    #[serde(rename = "greater-than")]
    GreaterThan,
    #[serde(rename = "not-equal")]
    NotEqual,
}
/// String test, suitable for string fields, used in conjuction with the stringValue and stringWildcards. Default \"equal\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StringTest {
    #[serde(rename = "equal")]
    Equal,
    #[serde(rename = "not-equal")]
    NotEqual,
}
/// Choice test, suitable for enum fields, used in conjuction with the choiceValue. Default \"equal\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ChoiceTest {
    #[serde(rename = "equal")]
    Equal,
    #[serde(rename = "not-equal")]
    NotEqual,
}
/// Version test, suitable for version fields, used in conjuction with the versionValue. Default \"equal\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VersionTest {
    #[serde(rename = "less-than")]
    LessThan,
    #[serde(rename = "less-than-or-equal")]
    LessThanOrEqual,
    #[serde(rename = "equal")]
    Equal,
    #[serde(rename = "greater-than-or-equal")]
    GreaterThanOrEqual,
    #[serde(rename = "greater-than")]
    GreaterThan,
    #[serde(rename = "not-equal")]
    NotEqual,
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IdTest {
    #[serde(rename = "less-than")]
    LessThan,
    #[serde(rename = "less-than-or-equal")]
    LessThanOrEqual,
    #[serde(rename = "equal")]
    Equal,
    #[serde(rename = "greater-than-or-equal")]
    GreaterThanOrEqual,
    #[serde(rename = "greater-than")]
    GreaterThan,
    #[serde(rename = "not-equal")]
    NotEqual,
}
