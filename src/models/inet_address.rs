/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InetAddress {
    #[serde(rename = "canonicalHostName", skip_serializing_if = "Option::is_none")]
    pub canonical_host_name: Option<String>,
    #[serde(rename = "multicastAddress", skip_serializing_if = "Option::is_none")]
    pub multicast_address: Option<bool>,
    #[serde(rename = "anyLocalAddress", skip_serializing_if = "Option::is_none")]
    pub any_local_address: Option<bool>,
    #[serde(rename = "loopbackAddress", skip_serializing_if = "Option::is_none")]
    pub loopback_address: Option<bool>,
    #[serde(rename = "linkLocalAddress", skip_serializing_if = "Option::is_none")]
    pub link_local_address: Option<bool>,
    #[serde(rename = "siteLocalAddress", skip_serializing_if = "Option::is_none")]
    pub site_local_address: Option<bool>,
    #[serde(rename = "mcglobal", skip_serializing_if = "Option::is_none")]
    pub mcglobal: Option<bool>,
    #[serde(rename = "mcnodeLocal", skip_serializing_if = "Option::is_none")]
    pub mcnode_local: Option<bool>,
    #[serde(rename = "mclinkLocal", skip_serializing_if = "Option::is_none")]
    pub mclink_local: Option<bool>,
    #[serde(rename = "mcsiteLocal", skip_serializing_if = "Option::is_none")]
    pub mcsite_local: Option<bool>,
    #[serde(rename = "mcorgLocal", skip_serializing_if = "Option::is_none")]
    pub mcorg_local: Option<bool>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<String>>,
    #[serde(rename = "hostAddress", skip_serializing_if = "Option::is_none")]
    pub host_address: Option<String>,
    #[serde(rename = "hostName", skip_serializing_if = "Option::is_none")]
    pub host_name: Option<String>,
}

impl InetAddress {
    pub fn new() -> InetAddress {
        InetAddress {
            canonical_host_name: None,
            multicast_address: None,
            any_local_address: None,
            loopback_address: None,
            link_local_address: None,
            site_local_address: None,
            mcglobal: None,
            mcnode_local: None,
            mclink_local: None,
            mcsite_local: None,
            mcorg_local: None,
            address: None,
            host_address: None,
            host_name: None,
        }
    }
}
