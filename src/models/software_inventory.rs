/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SoftwareInventory : Software inventory details.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SoftwareInventory {
    /// ID of the computer that the inventory scan was performed on (or is being performed on). Searchable as Numeric.
    #[serde(rename = "computerID", skip_serializing_if = "Option::is_none")]
    pub computer_id: Option<i32>,
    /// Name of the inventory. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the inventory. Searchable as String.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// State of the inventory scan. Searchable as Choice.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Time the inventory scan was started, in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<i64>,
    /// Time the inventory scan was completed, in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "completedDate", skip_serializing_if = "Option::is_none")]
    pub completed_date: Option<i64>,
    /// Either the ID of the administrator that initiated the inventory scan or the ID of the API key if the inventory scan was initiated using an API Key. Searchable as Numeric.
    #[serde(rename = "initiatorID", skip_serializing_if = "Option::is_none")]
    pub initiator_id: Option<i32>,
    /// ID of the software inventory. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i64>,
}

impl SoftwareInventory {
    /// Software inventory details.
    pub fn new() -> SoftwareInventory {
        SoftwareInventory {
            computer_id: None,
            name: None,
            description: None,
            state: None,
            start_date: None,
            completed_date: None,
            initiator_id: None,
            ID: None,
        }
    }
}

/// State of the inventory scan. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "building")]
    Building,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "requested")]
    Requested,
}

