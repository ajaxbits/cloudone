/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// FirewallRule : Firewall rule details.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FirewallRule {
    /// Name of the firewall rule. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the firewall rule. Searchable as String.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Action of the packet filter. Searchable as Choice.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    /// Priority of the packet filter. Searchable as Choice.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Priority>,
    /// Packet direction. Searchable as Choice.
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// Supported frame types. Searchable as Choice.
    #[serde(rename = "frameType", skip_serializing_if = "Option::is_none")]
    pub frame_type: Option<FrameType>,
    /// Ethernet frame number. Only required for FrameType \"other\". Searchable as Numeric.
    #[serde(rename = "frameNumber", skip_serializing_if = "Option::is_none")]
    pub frame_number: Option<i32>,
    /// Controls if the frame setting should be inverted. Set to true to invert. Searchable as Boolean.
    #[serde(rename = "frameNot", skip_serializing_if = "Option::is_none")]
    pub frame_not: Option<bool>,
    /// Protocol. Searchable as Choice.
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<Protocol>,
    /// Two-byte protocol number. Searchable as Numeric.
    #[serde(rename = "protocolNumber", skip_serializing_if = "Option::is_none")]
    pub protocol_number: Option<i32>,
    /// Controls if the protocol setting should be inverted. Set to true to invert. Searchable as Boolean.
    #[serde(rename = "protocolNot", skip_serializing_if = "Option::is_none")]
    pub protocol_not: Option<bool>,
    /// Source IP type. Default is \"any\". Searchable as Choice.
    #[serde(rename = "sourceIPType", skip_serializing_if = "Option::is_none")]
    pub source_ip_type: Option<SourceIpType>,
    /// Source IP. Only applies to source IP type \"masked-ip\" or \"single\". Searchable as String.
    #[serde(rename = "sourceIPValue", skip_serializing_if = "Option::is_none")]
    pub source_ip_value: Option<String>,
    /// Source IP mask. Only applies to source IP type \"masked-ip\". Searchable as String.
    #[serde(rename = "sourceIPMask", skip_serializing_if = "Option::is_none")]
    pub source_ip_mask: Option<String>,
    /// The first value for a range of source IP addresses. Only applies to source IP type \"range\". Searchable as String.
    #[serde(rename = "sourceIPRangeFrom", skip_serializing_if = "Option::is_none")]
    pub source_ip_range_from: Option<String>,
    /// The last value for a range of source IP addresses. Only applies to source IP type \"range\". Searchable as String.
    #[serde(rename = "sourceIPRangeTo", skip_serializing_if = "Option::is_none")]
    pub source_ip_range_to: Option<String>,
    /// List of source IP addresses. Only applies to source IP type \"multiple\". Searchable as String.
    #[serde(rename = "sourceIPMultiple", skip_serializing_if = "Option::is_none")]
    pub source_ip_multiple: Option<Vec<String>>,
    /// ID of source IP list. Only applies to source IP type \"ip-list\". Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(rename = "sourceIPListID", skip_serializing_if = "Option::is_none")]
    pub source_ip_list_id: Option<i32>,
    /// Controls if the source IP setting should be inverted. Set to true to invert. Searchable as Boolean.
    #[serde(rename = "sourceIPNot", skip_serializing_if = "Option::is_none")]
    pub source_ip_not: Option<bool>,
    /// Source MAC type. Default is \"any\". Searchable as Choice.
    #[serde(rename = "sourceMACType", skip_serializing_if = "Option::is_none")]
    pub source_mac_type: Option<SourceMacType>,
    /// Source MAC address. Only applies to MAC type \"single\". Searchable as String.
    #[serde(rename = "sourceMACValue", skip_serializing_if = "Option::is_none")]
    pub source_mac_value: Option<String>,
    /// List of MAC addresses. Only applies to MAC type \"multiple\". Searchable as String.
    #[serde(rename = "sourceMACMultiple", skip_serializing_if = "Option::is_none")]
    pub source_mac_multiple: Option<Vec<String>>,
    /// ID of MAC address list. Only applies to MAC type \"mac-list\". Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(rename = "sourceMACListID", skip_serializing_if = "Option::is_none")]
    pub source_mac_list_id: Option<i32>,
    /// Controls if the source MAC setting should be inverted. Set to true to invert. Searchable as Boolean.
    #[serde(rename = "sourceMACNot", skip_serializing_if = "Option::is_none")]
    pub source_mac_not: Option<bool>,
    /// The type of source port. Searchable as Choice.
    #[serde(rename = "sourcePortType", skip_serializing_if = "Option::is_none")]
    pub source_port_type: Option<SourcePortType>,
    /// List of comma-delimited source ports. Only applies to source type \"multiple\". Searchable as String.
    #[serde(rename = "sourcePortMultiple", skip_serializing_if = "Option::is_none")]
    pub source_port_multiple: Option<Vec<String>>,
    /// ID of source port list. Only applies to source type \"port-list\". Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(rename = "sourcePortListID", skip_serializing_if = "Option::is_none")]
    pub source_port_list_id: Option<i32>,
    /// Controls if the source port setting should be inverted. Set to true to invert. Searchable as Boolean.
    #[serde(rename = "sourcePortNot", skip_serializing_if = "Option::is_none")]
    pub source_port_not: Option<bool>,
    /// Destination IP type. Default is \"any\". Searchable as Choice.
    #[serde(rename = "destinationIPType", skip_serializing_if = "Option::is_none")]
    pub destination_ip_type: Option<DestinationIpType>,
    /// Destination IP. Only applies to destination IP type \"masked-ip\" or \"single\". Searchable as String.
    #[serde(rename = "destinationIPValue", skip_serializing_if = "Option::is_none")]
    pub destination_ip_value: Option<String>,
    /// Destination IP mask. Only applies to destination IP type \"masked-ip\". Searchable as String.
    #[serde(rename = "destinationIPMask", skip_serializing_if = "Option::is_none")]
    pub destination_ip_mask: Option<String>,
    /// The first value for a range of destination IP addresses. Only applies to estination IP type \"range\". Searchable as String.
    #[serde(
        rename = "destinationIPRangeFrom",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_ip_range_from: Option<String>,
    /// The last value for a range of destination IP addresses. Only applies to destination IP type \"range\". Searchable as String.
    #[serde(
        rename = "destinationIPRangeTo",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_ip_range_to: Option<String>,
    /// List of comma-delimited destination IP addresses. Only applies to destination IP type \"multiple\". Searchable as String.
    #[serde(
        rename = "destinationIPMultiple",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_ip_multiple: Option<Vec<String>>,
    /// ID of destination IP list. Only applies to destination IP type \"ip-list\". Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(
        rename = "destinationIPListID",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_ip_list_id: Option<i32>,
    /// Controls if the destination IP setting should be inverted. Set to true to invert. Searchable as Boolean.
    #[serde(rename = "destinationIPNot", skip_serializing_if = "Option::is_none")]
    pub destination_ip_not: Option<bool>,
    /// Destination MAC type. Default is \"any\". Searchable as Choice.
    #[serde(rename = "destinationMACType", skip_serializing_if = "Option::is_none")]
    pub destination_mac_type: Option<DestinationMacType>,
    /// Destination MAC address. Only applies to MAC type \"single\". Searchable as String.
    #[serde(
        rename = "destinationMACValue",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_mac_value: Option<String>,
    /// List of comma-delimited MAC addresses. Only applies to MAC type \"multiple\". Searchable as String.
    #[serde(
        rename = "destinationMACMultiple",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_mac_multiple: Option<Vec<String>>,
    /// ID of MAC address list. Only applies to MAC type \"mac-list\". Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(
        rename = "destinationMACListID",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_mac_list_id: Option<i32>,
    /// Controls if the destination MAC setting should be inverted. Set to true to invert. Searchable as Boolean.
    #[serde(rename = "destinationMACNot", skip_serializing_if = "Option::is_none")]
    pub destination_mac_not: Option<bool>,
    /// The type of destination port. Searchable as Choice.
    #[serde(
        rename = "destinationPortType",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_port_type: Option<DestinationPortType>,
    /// List of comma-delimited destination ports. Only applies to destination type \"multiple\". Searchable as String.
    #[serde(
        rename = "destinationPortMultiple",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_port_multiple: Option<Vec<String>>,
    /// ID of destination port list. Only applies to destination type \"port-list\". Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(
        rename = "destinationPortListID",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_port_list_id: Option<i32>,
    /// Controls if the destination port setting should be inverted. Set to true to invert. Searchable as Boolean.
    #[serde(rename = "destinationPortNot", skip_serializing_if = "Option::is_none")]
    pub destination_port_not: Option<bool>,
    /// True if any flags are used. Searchable as Boolean.
    #[serde(rename = "anyFlags", skip_serializing_if = "Option::is_none")]
    pub any_flags: Option<bool>,
    /// Controls if logging for this filter is disabled. Only applies to filter action \"log-only\" or \"deny\". Searchable as Boolean.
    #[serde(rename = "logDisabled", skip_serializing_if = "Option::is_none")]
    pub log_disabled: Option<bool>,
    /// Controls if this filter should capture data for every log. Searchable as Boolean.
    #[serde(rename = "includePacketData", skip_serializing_if = "Option::is_none")]
    pub include_packet_data: Option<bool>,
    /// Controls if this filter should be alerted on. Searchable as Boolean.
    #[serde(rename = "alertEnabled", skip_serializing_if = "Option::is_none")]
    pub alert_enabled: Option<bool>,
    /// ID of the schedule to control when this filter is \"on\". Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(rename = "scheduleID", skip_serializing_if = "Option::is_none")]
    pub schedule_id: Option<i32>,
    /// RuleContext that is applied to this filter. Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(rename = "contextID", skip_serializing_if = "Option::is_none")]
    pub context_id: Option<i32>,
    #[serde(rename = "tcpflags", skip_serializing_if = "Option::is_none")]
    pub tcpflags: Option<Vec<Tcpflags>>,
    /// ID of the firewall rule. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
    #[serde(rename = "TCPNot", skip_serializing_if = "Option::is_none")]
    pub tcp_not: Option<bool>,
    #[serde(rename = "ICMPType", skip_serializing_if = "Option::is_none")]
    pub icmp_type: Option<i32>,
    #[serde(rename = "ICMPCode", skip_serializing_if = "Option::is_none")]
    pub icmp_code: Option<i32>,
    #[serde(rename = "ICMPNot", skip_serializing_if = "Option::is_none")]
    pub icmp_not: Option<bool>,
}

impl FirewallRule {
    /// Firewall rule details.
    pub fn new() -> FirewallRule {
        FirewallRule {
            name: None,
            description: None,
            action: None,
            priority: None,
            direction: None,
            frame_type: None,
            frame_number: None,
            frame_not: None,
            protocol: None,
            protocol_number: None,
            protocol_not: None,
            source_ip_type: None,
            source_ip_value: None,
            source_ip_mask: None,
            source_ip_range_from: None,
            source_ip_range_to: None,
            source_ip_multiple: None,
            source_ip_list_id: None,
            source_ip_not: None,
            source_mac_type: None,
            source_mac_value: None,
            source_mac_multiple: None,
            source_mac_list_id: None,
            source_mac_not: None,
            source_port_type: None,
            source_port_multiple: None,
            source_port_list_id: None,
            source_port_not: None,
            destination_ip_type: None,
            destination_ip_value: None,
            destination_ip_mask: None,
            destination_ip_range_from: None,
            destination_ip_range_to: None,
            destination_ip_multiple: None,
            destination_ip_list_id: None,
            destination_ip_not: None,
            destination_mac_type: None,
            destination_mac_value: None,
            destination_mac_multiple: None,
            destination_mac_list_id: None,
            destination_mac_not: None,
            destination_port_type: None,
            destination_port_multiple: None,
            destination_port_list_id: None,
            destination_port_not: None,
            any_flags: None,
            log_disabled: None,
            include_packet_data: None,
            alert_enabled: None,
            schedule_id: None,
            context_id: None,
            tcpflags: None,
            ID: None,
            tcp_not: None,
            icmp_type: None,
            icmp_code: None,
            icmp_not: None,
        }
    }
}

/// Action of the packet filter. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "log-only")]
    LogOnly,
    #[serde(rename = "allow")]
    Allow,
    #[serde(rename = "deny")]
    Deny,
    #[serde(rename = "force-allow")]
    ForceAllow,
    #[serde(rename = "bypass")]
    Bypass,
}
/// Priority of the packet filter. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Priority {
    #[serde(rename = "0")]
    _0,
    #[serde(rename = "1")]
    _1,
    #[serde(rename = "2")]
    _2,
    #[serde(rename = "3")]
    _3,
    #[serde(rename = "4")]
    _4,
}
/// Packet direction. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "incoming")]
    Incoming,
    #[serde(rename = "outgoing")]
    Outgoing,
}
/// Supported frame types. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FrameType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "ip")]
    Ip,
    #[serde(rename = "arp")]
    Arp,
    #[serde(rename = "revarp")]
    Revarp,
    #[serde(rename = "ipv4")]
    Ipv4,
    #[serde(rename = "ipv6")]
    Ipv6,
    #[serde(rename = "other")]
    Other,
}
/// Protocol. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Protocol {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "icmp")]
    Icmp,
    #[serde(rename = "igmp")]
    Igmp,
    #[serde(rename = "ggp")]
    Ggp,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "pup")]
    Pup,
    #[serde(rename = "udp")]
    Udp,
    #[serde(rename = "idp")]
    Idp,
    #[serde(rename = "nd")]
    Nd,
    #[serde(rename = "raw")]
    Raw,
    #[serde(rename = "tcp-udp")]
    TcpUdp,
    #[serde(rename = "icmpv6")]
    Icmpv6,
    #[serde(rename = "other")]
    Other,
}
/// Source IP type. Default is \"any\". Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SourceIpType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "masked-ip")]
    MaskedIp,
    #[serde(rename = "range")]
    Range,
    #[serde(rename = "ip-list")]
    IpList,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "multiple")]
    Multiple,
}
/// Source MAC type. Default is \"any\". Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SourceMacType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "mac-list")]
    MacList,
    #[serde(rename = "multiple")]
    Multiple,
}
/// The type of source port. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SourcePortType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "multiple")]
    Multiple,
    #[serde(rename = "port-list")]
    PortList,
}
/// Destination IP type. Default is \"any\". Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DestinationIpType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "masked-ip")]
    MaskedIp,
    #[serde(rename = "range")]
    Range,
    #[serde(rename = "ip-list")]
    IpList,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "multiple")]
    Multiple,
}
/// Destination MAC type. Default is \"any\". Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DestinationMacType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "mac-list")]
    MacList,
    #[serde(rename = "multiple")]
    Multiple,
}
/// The type of destination port. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DestinationPortType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "multiple")]
    Multiple,
    #[serde(rename = "port-list")]
    PortList,
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tcpflags {
    #[serde(rename = "fin")]
    Fin,
    #[serde(rename = "syn")]
    Syn,
    #[serde(rename = "rst")]
    Rst,
    #[serde(rename = "psh")]
    Psh,
    #[serde(rename = "ack")]
    Ack,
    #[serde(rename = "urg")]
    Urg,
}
