/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// Interface : Network interface of a managed computer.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Interface {
    /// ID of the InterfaceType to which the Interface is mapped. Searchable as Numeric.
    #[serde(rename = "interfaceTypeID", skip_serializing_if = "Option::is_none")]
    pub interface_type_id: Option<i32>,
    /// Name of the Interface. Set automatically by the DSM. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Display name of the Interface. Optionally set by the user. Searchable as String.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Indicates whether or not the interface is currently detected. Searchable as Boolean.
    #[serde(rename = "detected", skip_serializing_if = "Option::is_none")]
    pub detected: Option<bool>,
    /// ID of the Interface.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
    /// MAC Address of the interface. Searchable as String.
    #[serde(rename = "MAC", skip_serializing_if = "Option::is_none")]
    pub MAC: Option<String>,
    /// Indicates whether the interface uses DHCP. The value is true if it uses DHCP. Searchable as Boolean.
    #[serde(rename = "DHCP", skip_serializing_if = "Option::is_none")]
    pub DHCP: Option<bool>,
    /// List of IPs used by the interface.
    #[serde(rename = "IPs", skip_serializing_if = "Option::is_none")]
    pub ips: Option<Vec<String>>,
}

impl Interface {
    /// Network interface of a managed computer.
    pub fn new() -> Interface {
        Interface {
            interface_type_id: None,
            name: None,
            display_name: None,
            detected: None,
            ID: None,
            MAC: None,
            DHCP: None,
            ips: None,
        }
    }
}
