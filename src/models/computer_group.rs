/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// ComputerGroup : Logical containers to organize computers that are protected by Deep Security Manager.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputerGroup {
    /// Specifies what type the ComputerGroup is. Defaults to `folder`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Name of the ComputerGroup. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the ComputerGroup. Searchable as String.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// ID of the ComputerGroup's parent group. Empty if the parent is a root ComputerGroup. ComputerGroup will be a root group unless a valid value for `parentGroupID` is set. Searchable as Numeric.
    #[serde(rename = "parentGroupID", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<i32>,
    /// ID of the ComputerGroup's directory server. Set to `0` if the group is not a directory server. Searchable as Numeric.
    #[serde(rename = "directoryID", skip_serializing_if = "Option::is_none")]
    pub directory_id: Option<i32>,
    /// External ID of the ComputerGroup. Empty if the ComputerGroup is not created/managed by a cloud account. Searchable as String.
    #[serde(rename = "externalID", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    /// ID of the ComputerGroup as it exists in VMware vCloud. Set to `0` if the ComputerGroup is not from vCloud. Searchable as Numeric.
    #[serde(rename = "virtualID", skip_serializing_if = "Option::is_none")]
    pub virtual_id: Option<i32>,
    /// Type of the ComputerGroup as it exists in VMware vCloud. Set to `0` if the ComputerGroup is not from vCloud. Searchable as Numeric.
    #[serde(rename = "virtualType", skip_serializing_if = "Option::is_none")]
    pub virtual_type: Option<i32>,
    /// Name of the ComputerGroup as it exists in VMware vCloud. Ignored if the ComputerGroup is not from vCloud. Searchable as String.
    #[serde(rename = "virtualName", skip_serializing_if = "Option::is_none")]
    pub virtual_name: Option<String>,
    /// Cloud platform of the ComputerGroup.  Ignored if the ComputerGroup does not represent a cloud container. Searchable as Choice.
    #[serde(rename = "cloudType", skip_serializing_if = "Option::is_none")]
    pub cloud_type: Option<CloudType>,
    /// Cloud container type of the ComputerGroup. This is platform dependent. Ignored if the ComputerGroup does not represent a cloud container. Searchable as Numeric.
    #[serde(rename = "cloudResourceType", skip_serializing_if = "Option::is_none")]
    pub cloud_resource_type: Option<CloudResourceType>,
    /// Cloud container ID of the ComputerGroup. Ignored if the ComputerGroup does not represent a cloud container. Searchable as Numeric.
    #[serde(rename = "cloudID", skip_serializing_if = "Option::is_none")]
    pub cloud_id: Option<i32>,
    /// Amazon Web Services account ID of the ComputerGroup. Set to `0` if the ComputerGroup does not represent an Amazon Web Services account. Searchable as Numeric.
    #[serde(rename = "amazonAccountID", skip_serializing_if = "Option::is_none")]
    pub amazon_account_id: Option<i32>,
    /// Amazon Web Services region ID of the ComputerGroup. Set to `0` if the ComputerGroup does not represent an Amazon Web Services region. amazonWorkspacesID will be used instead if the ComputerGroup represents an Amazon Web Services WorkSpaces node. Searchable as Numeric.
    #[serde(rename = "amazonRegionID", skip_serializing_if = "Option::is_none")]
    pub amazon_region_id: Option<i64>,
    /// Amazon Web Services Virtual Private Cloud ID of the ComputerGroup. Set to `0` if the ComputerGroup does not represent an Amazon Web Services Virtual Private Cloud. Searchable as Numeric.
    #[serde(rename = "amazonVPCID", skip_serializing_if = "Option::is_none")]
    pub amazon_vpcid: Option<i64>,
    /// Amazon Web Services subnet ID of the ComputerGroup. Set to `0` if the ComputerGroup does not represent an Amazon Web Services subnet. Searchable as Numeric.
    #[serde(rename = "amazonSubnetID", skip_serializing_if = "Option::is_none")]
    pub amazon_subnet_id: Option<i64>,
    /// Amazon Web Services WorkSpaces ID of the ComputerGroup. Set to `0` if the ComputerGroup does not represent an Amazon Web Services WorkSpace. Will be used instead of amazonRegionID if the ComputerGroup represents a WorkSpaces node under a region. Searchable as Numeric.
    #[serde(rename = "amazonWorkspacesID", skip_serializing_if = "Option::is_none")]
    pub amazon_workspaces_id: Option<i64>,
    /// Amazon Web Services directory ID of the ComputerGroup. Set to `0` if the ComputerGroup does not represent an Amazon Web Services directory. Searchable as Numeric.
    #[serde(rename = "amazonDirectoryID", skip_serializing_if = "Option::is_none")]
    pub amazon_directory_id: Option<i64>,
    /// ID of the ComputerGroup. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
}

impl ComputerGroup {
    /// Logical containers to organize computers that are protected by Deep Security Manager.
    pub fn new() -> ComputerGroup {
        ComputerGroup {
            _type: None,
            name: None,
            description: None,
            parent_group_id: None,
            directory_id: None,
            external_id: None,
            virtual_id: None,
            virtual_type: None,
            virtual_name: None,
            cloud_type: None,
            cloud_resource_type: None,
            cloud_id: None,
            amazon_account_id: None,
            amazon_region_id: None,
            amazon_vpcid: None,
            amazon_subnet_id: None,
            amazon_workspaces_id: None,
            amazon_directory_id: None,
            ID: None,
        }
    }
}

/// Specifies what type the ComputerGroup is. Defaults to `folder`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ad-add-directory")]
    AdAddDirectory,
    #[serde(rename = "ad-folder-network")]
    AdFolderNetwork,
    #[serde(rename = "aws-region")]
    AwsRegion,
    #[serde(rename = "aws-vpc")]
    AwsVpc,
    #[serde(rename = "aws-subnet")]
    AwsSubnet,
    #[serde(rename = "aws-workspaces")]
    AwsWorkspaces,
    #[serde(rename = "aws-directory")]
    AwsDirectory,
    #[serde(rename = "azure-top")]
    AzureTop,
    #[serde(rename = "azure-group")]
    AzureGroup,
    #[serde(rename = "gcp-connector")]
    GcpConnector,
    #[serde(rename = "gcp-project")]
    GcpProject,
    #[serde(rename = "cloud-provider-top")]
    CloudProviderTop,
    #[serde(rename = "vcloud-top")]
    VcloudTop,
    #[serde(rename = "aws-account")]
    AwsAccount,
    #[serde(rename = "vm-group")]
    VmGroup,
    #[serde(rename = "vcloud-provider_datacenter")]
    VcloudProviderDatacenter,
    #[serde(rename = "vcloud-vapp")]
    VcloudVapp,
    #[serde(rename = "vcenters-top")]
    VcentersTop,
    #[serde(rename = "vcenter-folder-network")]
    VcenterFolderNetwork,
    #[serde(rename = "vmware-datacenter")]
    VmwareDatacenter,
    #[serde(rename = "vcenter-cluster-group")]
    VcenterClusterGroup,
    #[serde(rename = "external-group")]
    ExternalGroup,
    #[serde(rename = "folder")]
    Folder,
    #[serde(rename = "root")]
    Root,
}
/// Cloud platform of the ComputerGroup.  Ignored if the ComputerGroup does not represent a cloud container. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CloudType {
    #[serde(rename = "amazon")]
    Amazon,
    #[serde(rename = "vcloud-private-cloud")]
    VcloudPrivateCloud,
    #[serde(rename = "azure")]
    Azure,
    #[serde(rename = "azure-arm")]
    AzureArm,
    #[serde(rename = "gcp")]
    Gcp,
}
/// Cloud container type of the ComputerGroup. This is platform dependent. Ignored if the ComputerGroup does not represent a cloud container. Searchable as Numeric.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CloudResourceType {
    #[serde(rename = "physical")]
    Physical,
    #[serde(rename = "top-level")]
    TopLevel,
    #[serde(rename = "partition")]
    Partition,
    #[serde(rename = "aws-ec2-instance")]
    AwsEc2Instance,
    #[serde(rename = "aws-workspace")]
    AwsWorkspace,
    #[serde(rename = "vcloud-organization")]
    VcloudOrganization,
    #[serde(rename = "vcloud-catalog")]
    VcloudCatalog,
    #[serde(rename = "vcloud-networks")]
    VcloudNetworks,
    #[serde(rename = "vcloud-virtual-data-center")]
    VcloudVirtualDataCenter,
    #[serde(rename = "vcloud-virtual-application")]
    VcloudVirtualApplication,
    #[serde(rename = "vcloud-virtual-application-template")]
    VcloudVirtualApplicationTemplate,
    #[serde(rename = "vcloud-virtual-machine")]
    VcloudVirtualMachine,
    #[serde(rename = "azure-instance")]
    AzureInstance,
    #[serde(rename = "azure-arm-instance")]
    AzureArmInstance,
}
