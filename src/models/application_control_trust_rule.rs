/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ApplicationControlTrustRule : TrustRuleset rule details.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationControlTrustRule {
    /// Type of the rule. Searchable as Choice.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Name of the trust rule. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the trust rule. Searchable as String.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Whether the rule is assigned to any rulesets
    #[serde(rename = "isAssigned", skip_serializing_if = "Option::is_none")]
    pub is_assigned: Option<bool>,
    /// Timestamp of the trust rule's creation, in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "createdTime", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<i64>,
    /// Timestamp of when the trust rule was last updated, in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<i64>,
    /// IDs of all rulesets that the rule is assigned to.
    #[serde(rename = "rulesetIDs", skip_serializing_if = "Option::is_none")]
    pub ruleset_ids: Option<Vec<i64>>,
    /// Attributes that define the trust rule.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Vec<crate::models::TrustRuleAttribute>>,
    /// ID of the trust rule. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i64>,
}

impl ApplicationControlTrustRule {
    /// TrustRuleset rule details.
    pub fn new() -> ApplicationControlTrustRule {
        ApplicationControlTrustRule {
            _type: None,
            name: None,
            description: None,
            is_assigned: None,
            created_time: None,
            last_updated_time: None,
            ruleset_ids: None,
            attributes: None,
            ID: None,
        }
    }
}

/// Type of the rule. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "allowFromSourceTarget")]
    AllowFromSourceTarget,
    #[serde(rename = "allowFromSource")]
    AllowFromSource,
    #[serde(rename = "allowByTarget")]
    AllowByTarget,
    #[serde(rename = "ignoreFromSource")]
    IgnoreFromSource,
}

