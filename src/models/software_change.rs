/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SoftwareChange : Software change details.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SoftwareChange {
    /// ID of the computer on which the software change was found. Searchable as Numeric.
    #[serde(rename = "computerID", skip_serializing_if = "Option::is_none")]
    pub computer_id: Option<i32>,
    /// ID of the computer group where the software change was found. Searchable as Numeric.
    #[serde(rename = "computerGroupID", skip_serializing_if = "Option::is_none")]
    pub computer_group_id: Option<i32>,
    /// Vendor name associated with the changed software. Searchable as String.
    #[serde(rename = "vendorName", skip_serializing_if = "Option::is_none")]
    pub vendor_name: Option<String>,
    /// Product name associated with the changed software. Searchable as String.
    #[serde(rename = "productName", skip_serializing_if = "Option::is_none")]
    pub product_name: Option<String>,
    /// Product version associated with the changed software. Searchable as String.
    #[serde(rename = "productVersion", skip_serializing_if = "Option::is_none")]
    pub product_version: Option<String>,
    /// File version associated with the changed software. Searchable as String.
    #[serde(rename = "fileVersion", skip_serializing_if = "Option::is_none")]
    pub file_version: Option<String>,
    /// File description associated with the changed software. Searchable as String.
    #[serde(rename = "fileDescription", skip_serializing_if = "Option::is_none")]
    pub file_description: Option<String>,
    /// SHA1 hash calculated from the changed software. Searchable as String.
    #[serde(rename = "sha1", skip_serializing_if = "Option::is_none")]
    pub sha1: Option<String>,
    /// SHA256 hash calculated from the changed software. Searchable as String.
    #[serde(rename = "sha256", skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// MD5 hash calculated from the changed software. Searchable as String.
    #[serde(rename = "md5", skip_serializing_if = "Option::is_none")]
    pub md5: Option<String>,
    /// File name of the changed software. Searchable as String.
    #[serde(rename = "fileName", skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    /// Path on which the software change was found. Searchable as String.
    #[serde(rename = "installPath", skip_serializing_if = "Option::is_none")]
    pub install_path: Option<String>,
    /// File size of the changed software in bytes. Searchable as Numeric.
    #[serde(rename = "fileSize", skip_serializing_if = "Option::is_none")]
    pub file_size: Option<i64>,
    /// Time the software change was discovered, in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "changeEventTime", skip_serializing_if = "Option::is_none")]
    pub change_event_time: Option<i64>,
    /// Username of the user that introduced the software change. Searchable as String.
    #[serde(rename = "changeByUser", skip_serializing_if = "Option::is_none")]
    pub change_by_user: Option<String>,
    /// User ID of the user that introduced the software change. Searchable as String.
    #[serde(rename = "changeByUserID", skip_serializing_if = "Option::is_none")]
    pub change_by_user_id: Option<String>,
    /// Name of the process that introduced the software change. Searchable as String.
    #[serde(rename = "changeByProcess", skip_serializing_if = "Option::is_none")]
    pub change_by_process: Option<String>,
    /// Process ID of the process that introduced the software change. Searchable as String.
    #[serde(rename = "changeByProcessID", skip_serializing_if = "Option::is_none")]
    pub change_by_process_id: Option<String>,
    /// ID of software change. Searchable as Numeric.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i64>,
}

impl SoftwareChange {
    /// Software change details.
    pub fn new() -> SoftwareChange {
        SoftwareChange {
            computer_id: None,
            computer_group_id: None,
            vendor_name: None,
            product_name: None,
            product_version: None,
            file_version: None,
            file_description: None,
            sha1: None,
            sha256: None,
            md5: None,
            file_name: None,
            install_path: None,
            file_size: None,
            change_event_time: None,
            change_by_user: None,
            change_by_user_id: None,
            change_by_process: None,
            change_by_process_id: None,
            ID: None,
        }
    }
}


