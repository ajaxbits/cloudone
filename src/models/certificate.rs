/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// Certificate : Certificate

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Certificate {
    /// ID of the SSL certificate. This ID is set automatically.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
    /// The certificate. It's a PEM formatted string
    #[serde(rename = "certificate", skip_serializing_if = "Option::is_none")]
    pub certificate: Option<String>,
    #[serde(rename = "certificateDetails", skip_serializing_if = "Option::is_none")]
    pub certificate_details: Option<Box<crate::models::CertificateDetails>>,
    /// True if the certificate is trusted by Deep Security Manager or verified by a CA.
    #[serde(rename = "trusted", skip_serializing_if = "Option::is_none")]
    pub trusted: Option<bool>,
    /// The type of connections for which the certificate is to be used.
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Purpose>,
}

impl Certificate {
    /// Certificate
    pub fn new() -> Certificate {
        Certificate {
            ID: None,
            certificate: None,
            certificate_details: None,
            trusted: None,
            purpose: None,
        }
    }
}

/// The type of connections for which the certificate is to be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Purpose {
    #[serde(rename = "SSL")]
    SSL,
    #[serde(rename = "EXCEPTION")]
    EXCEPTION,
}
