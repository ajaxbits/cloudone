/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// AwsConnector : Defines an AWS Cloud Connector that is used to retrieve information from AWS.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AwsConnector {
    /// The AWS Connector's display name in DSM.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The AWS Account ID. Searchable as String.
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// The AWS Account Alias. Searchable as String.
    #[serde(rename = "accountAlias", skip_serializing_if = "Option::is_none")]
    pub account_alias: Option<String>,
    /// The AWS Access Key of the account. If used, Cross Account Role ARN is not required. Searchable as String.
    #[serde(rename = "accessKey", skip_serializing_if = "Option::is_none")]
    pub access_key: Option<String>,
    /// The AWS Secret Key required to add the connector using an Access Key. Not present in returned objects.
    #[serde(rename = "secretKey", skip_serializing_if = "Option::is_none")]
    pub secret_key: Option<String>,
    /// The region to initialize the EC2 client in. This is an advanced option used if you want to access special regions. Searchable as String.
    #[serde(rename = "seedRegion", skip_serializing_if = "Option::is_none")]
    pub seed_region: Option<String>,
    /// Specifies whether or not to use the DSM instance role to add the AWS Connector instead of an Access Key or a Cross Account Role ARN.
    #[serde(rename = "useInstanceRole", skip_serializing_if = "Option::is_none")]
    pub use_instance_role: Option<bool>,
    /// The Cross Account Role ARN of the AWS account. If used, Access Key is not required. Searchable as String.
    #[serde(
        rename = "crossAccountRoleArn",
        skip_serializing_if = "Option::is_none"
    )]
    pub cross_account_role_arn: Option<String>,
    /// Timestamp of the last time the AWS Connector was successfully synchronized, in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "lastSyncTime", skip_serializing_if = "Option::is_none")]
    pub last_sync_time: Option<i64>,
    /// The list of AWS regions that have been synchronized for the connector.
    #[serde(rename = "syncedRegions", skip_serializing_if = "Option::is_none")]
    pub synced_regions: Option<Vec<crate::models::AwsRegion>>,
    /// A flag controlling whether or not Amazon Workspaces are enabled for the connector. Searchable as Boolean. Default is false.
    #[serde(rename = "workspacesEnabled", skip_serializing_if = "Option::is_none")]
    pub workspaces_enabled: Option<bool>,
    /// The Deep Security internal ID of the AWS Cloud Connector. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
}

impl AwsConnector {
    /// Defines an AWS Cloud Connector that is used to retrieve information from AWS.
    pub fn new() -> AwsConnector {
        AwsConnector {
            display_name: None,
            account_id: None,
            account_alias: None,
            access_key: None,
            secret_key: None,
            seed_region: None,
            use_instance_role: None,
            cross_account_role_arn: None,
            last_sync_time: None,
            synced_regions: None,
            workspaces_enabled: None,
            ID: None,
        }
    }
}
