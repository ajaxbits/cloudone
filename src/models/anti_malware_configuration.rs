/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// AntiMalwareConfiguration : Configure protection against malware, viruses, trojans and spyware.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AntiMalwareConfiguration {
    /// Name of the anti-malware configuration. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the anti-malware configuration. Searchable as String.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The type of malware scan configuration. Searchable as Choice.
    #[serde(rename = "scanType", skip_serializing_if = "Option::is_none")]
    pub scan_type: Option<ScanType>,
    /// Controls whether to scan for known critical vulnerabilities. Use true to enable scan.
    #[serde(
        rename = "documentExploitProtectionEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub document_exploit_protection_enabled: Option<bool>,
    /// Scan for exploits against known critical vulnerabilities only. Searchable as Choice.
    #[serde(
        rename = "documentExploitProtection",
        skip_serializing_if = "Option::is_none"
    )]
    pub document_exploit_protection: Option<DocumentExploitProtection>,
    /// Controls whether to scan for exploits of known critical vulnerabilites as well as aggessively detect suspicious behaviour that could be an unknown exploit. Searchable as Choice.
    #[serde(
        rename = "documentExploitHeuristicLevel",
        skip_serializing_if = "Option::is_none"
    )]
    pub document_exploit_heuristic_level: Option<DocumentExploitHeuristicLevel>,
    /// Controls whether predictive machine learning is enabled.  Set to true to enable. Searchable as Boolean.
    #[serde(
        rename = "machineLearningEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_learning_enabled: Option<bool>,
    /// Controls whether to detect suspicious activity and unauthorized changes (including ransomware). Set to true to detect.
    #[serde(
        rename = "behaviorMonitoringEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub behavior_monitoring_enabled: Option<bool>,
    /// Controls whether to back up ransomware-encrypted files. Set to true to back up. Searchable as Boolean.
    #[serde(
        rename = "documentRecoveryEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub document_recovery_enabled: Option<bool>,
    /// Controls whether IntelliTrap is enabled. Set to true to enable. Searchable as Boolean.
    #[serde(rename = "intelliTrapEnabled", skip_serializing_if = "Option::is_none")]
    pub intelli_trap_enabled: Option<bool>,
    /// Controls whether to scan process memory for malware. Use true to enable scan. Searchable as Boolean.
    #[serde(rename = "memoryScanEnabled", skip_serializing_if = "Option::is_none")]
    pub memory_scan_enabled: Option<bool>,
    /// Controls whether to enable spyware/grayware protection. Set to true to enable. Searchable as Boolean.
    #[serde(rename = "spywareEnabled", skip_serializing_if = "Option::is_none")]
    pub spyware_enabled: Option<bool>,
    /// Controls whether to create an alert when the Malware Scan Configuration logs an event. Set to true to enable the alert. Searchable as Boolean.
    #[serde(rename = "alertEnabled", skip_serializing_if = "Option::is_none")]
    pub alert_enabled: Option<bool>,
    /// Specify if the scan will be peformed on all the directories or on a subset. Searchable as Choice.
    #[serde(rename = "directoriesToScan", skip_serializing_if = "Option::is_none")]
    pub directories_to_scan: Option<DirectoriesToScan>,
    /// ID of the directory list to scan. Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(rename = "directoryListID", skip_serializing_if = "Option::is_none")]
    pub directory_list_id: Option<i32>,
    /// Specify if scan will be performed on all files, a subset or by using IntelliScan. Searchable as Choice.
    #[serde(rename = "filesToScan", skip_serializing_if = "Option::is_none")]
    pub files_to_scan: Option<FilesToScan>,
    /// ID of the file extension list to scan. Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(
        rename = "fileExtensionListID",
        skip_serializing_if = "Option::is_none"
    )]
    pub file_extension_list_id: Option<i32>,
    /// ID of the directory list to exclude from the scan. Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(
        rename = "excludedDirectoryListID",
        skip_serializing_if = "Option::is_none"
    )]
    pub excluded_directory_list_id: Option<i32>,
    /// ID of the file list to exclude from the scan. Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(rename = "excludedFileListID", skip_serializing_if = "Option::is_none")]
    pub excluded_file_list_id: Option<i32>,
    /// ID of the file extension list to exclude from the scan. Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(
        rename = "excludedFileExtensionListID",
        skip_serializing_if = "Option::is_none"
    )]
    pub excluded_file_extension_list_id: Option<i32>,
    /// ID of the process image file list to exclude from the scan. Set to 0 to remove any assignment. Searchable as Numeric.
    #[serde(
        rename = "excludedProcessImageFileListID",
        skip_serializing_if = "Option::is_none"
    )]
    pub excluded_process_image_file_list_id: Option<i32>,
    /// Specify when to perform the real-time scan. Searchable as Choice.
    #[serde(rename = "realTimeScan", skip_serializing_if = "Option::is_none")]
    pub real_time_scan: Option<RealTimeScan>,
    /// Controls whether to scan compressed files. Use true to enable scan. Searchable as Boolean.
    #[serde(
        rename = "scanCompressedEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_compressed_enabled: Option<bool>,
    /// Maximum size of compressed files to scan, in MB. Searchable as Numeric.
    #[serde(
        rename = "scanCompressedMaximumSize",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_compressed_maximum_size: Option<i32>,
    /// The maximum number of levels of compression to scan. Searchable as Numeric.
    #[serde(
        rename = "scanCompressedMaximumLevels",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_compressed_maximum_levels: Option<i32>,
    /// Maximum number of files to extract. Searchable as Numeric.
    #[serde(
        rename = "scanCompressedMaximumFiles",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_compressed_maximum_files: Option<i32>,
    /// Controls whether to scan Embedded Microsoft Office Objects. Use true to enable scan. Searchable as Boolean.
    #[serde(
        rename = "microsoftOfficeEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub microsoft_office_enabled: Option<bool>,
    /// Number of Microsoft Object Linking and Embedding (OLE) Layers to scan. Searchable as Numeric.
    #[serde(
        rename = "microsoftOfficeLayers",
        skip_serializing_if = "Option::is_none"
    )]
    pub microsoft_office_layers: Option<i32>,
    /// Controls whether to scan network directories. Set to true to enable. Searchable as Boolean.
    #[serde(
        rename = "networkDirectoriesEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub network_directories_enabled: Option<bool>,
    /// Controls whether to use the action ActiveActions recommends when malware is detected. Set to true to use the action ActiveAction recommends.
    #[serde(
        rename = "customRemediationActionsEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub custom_remediation_actions_enabled: Option<bool>,
    /// Controls whether to use custom actions. Use true to enable custom actions. Available when 'customRemediationActionsEnabled' is true.
    #[serde(
        rename = "customScanActionsEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub custom_scan_actions_enabled: Option<bool>,
    /// The action to perform when a virus is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
    #[serde(rename = "scanActionForVirus", skip_serializing_if = "Option::is_none")]
    pub scan_action_for_virus: Option<ScanActionForVirus>,
    /// The action to perform when a trojan is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
    #[serde(
        rename = "scanActionForTrojans",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_trojans: Option<ScanActionForTrojans>,
    /// The action to perform when a packer is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
    #[serde(
        rename = "scanActionForPacker",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_packer: Option<ScanActionForPacker>,
    /// The action to perform when spyware is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
    #[serde(
        rename = "scanActionForSpyware",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_spyware: Option<ScanActionForSpyware>,
    /// The action to take when other threats are detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
    #[serde(
        rename = "scanActionForOtherThreats",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_other_threats: Option<ScanActionForOtherThreats>,
    /// The action to take when cookies are detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
    #[serde(
        rename = "scanActionForCookies",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_cookies: Option<ScanActionForCookies>,
    /// The action to take when a CVE exploit is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
    #[serde(rename = "scanActionForCVE", skip_serializing_if = "Option::is_none")]
    pub scan_action_for_cve: Option<ScanActionForCve>,
    /// The action to take when malware identified with heuristics are detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
    #[serde(
        rename = "scanActionForHeuristics",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_heuristics: Option<ScanActionForHeuristics>,
    /// The action to take when possible malware is detected. Searchable as Choice. Available when 'customRemediationActionsEnabled' is true.
    #[serde(
        rename = "scanActionForPossibleMalware",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_possible_malware: Option<ScanActionForPossibleMalware>,
    /// Controls whether Windows Antimalware Scan Interface (AMSI) protection is enabled. Set to true to enable.
    #[serde(rename = "amsiScanEnabled", skip_serializing_if = "Option::is_none")]
    pub amsi_scan_enabled: Option<bool>,
    /// The action to take when suspicious activity and unauthorized changes are detected. Searchable as Choice. Available when 'behaviorMonitoringEnabled' is true.
    #[serde(
        rename = "scanActionForBehaviorMonitoring",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_behavior_monitoring: Option<ScanActionForBehaviorMonitoring>,
    /// The action to take when malware identified with machine learning is detected. Searchable as Choice. Available when 'machineLearningEnabled' is true.
    #[serde(
        rename = "scanActionForMachineLearning",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_action_for_machine_learning: Option<ScanActionForMachineLearning>,
    /// The action to take when malware identified with AMSI protection is detected. Available when 'amsiScanEnabled' is true.
    #[serde(rename = "scanActionForAmsi", skip_serializing_if = "Option::is_none")]
    pub scan_action_for_amsi: Option<ScanActionForAmsi>,
    /// ID of the anti-malware configuration. This ID is set automatically. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
    #[serde(rename = "cpuUsage", skip_serializing_if = "Option::is_none")]
    pub cpu_usage: Option<CpuUsage>,
}

impl AntiMalwareConfiguration {
    /// Configure protection against malware, viruses, trojans and spyware.
    pub fn new() -> AntiMalwareConfiguration {
        AntiMalwareConfiguration {
            name: None,
            description: None,
            scan_type: None,
            document_exploit_protection_enabled: None,
            document_exploit_protection: None,
            document_exploit_heuristic_level: None,
            machine_learning_enabled: None,
            behavior_monitoring_enabled: None,
            document_recovery_enabled: None,
            intelli_trap_enabled: None,
            memory_scan_enabled: None,
            spyware_enabled: None,
            alert_enabled: None,
            directories_to_scan: None,
            directory_list_id: None,
            files_to_scan: None,
            file_extension_list_id: None,
            excluded_directory_list_id: None,
            excluded_file_list_id: None,
            excluded_file_extension_list_id: None,
            excluded_process_image_file_list_id: None,
            real_time_scan: None,
            scan_compressed_enabled: None,
            scan_compressed_maximum_size: None,
            scan_compressed_maximum_levels: None,
            scan_compressed_maximum_files: None,
            microsoft_office_enabled: None,
            microsoft_office_layers: None,
            network_directories_enabled: None,
            custom_remediation_actions_enabled: None,
            custom_scan_actions_enabled: None,
            scan_action_for_virus: None,
            scan_action_for_trojans: None,
            scan_action_for_packer: None,
            scan_action_for_spyware: None,
            scan_action_for_other_threats: None,
            scan_action_for_cookies: None,
            scan_action_for_cve: None,
            scan_action_for_heuristics: None,
            scan_action_for_possible_malware: None,
            amsi_scan_enabled: None,
            scan_action_for_behavior_monitoring: None,
            scan_action_for_machine_learning: None,
            scan_action_for_amsi: None,
            ID: None,
            cpu_usage: None,
        }
    }
}

/// The type of malware scan configuration. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanType {
    #[serde(rename = "real-time")]
    RealTime,
    #[serde(rename = "on-demand")]
    OnDemand,
}
/// Scan for exploits against known critical vulnerabilities only. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DocumentExploitProtection {
    #[serde(rename = "critical-only")]
    Only,
    #[serde(rename = "critical-and-heuristic")]
    AndHeuristic,
}
/// Controls whether to scan for exploits of known critical vulnerabilites as well as aggessively detect suspicious behaviour that could be an unknown exploit. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DocumentExploitHeuristicLevel {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "default-and-agressive")]
    DefaultAndAgressive,
}
/// Specify if the scan will be peformed on all the directories or on a subset. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DirectoriesToScan {
    #[serde(rename = "all-directories")]
    AllDirectories,
    #[serde(rename = "directory-list")]
    DirectoryList,
}
/// Specify if scan will be performed on all files, a subset or by using IntelliScan. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FilesToScan {
    #[serde(rename = "all-files")]
    AllFiles,
    #[serde(rename = "intelliscan-file-types")]
    IntelliscanFileTypes,
    #[serde(rename = "file-extension-list")]
    FileExtensionList,
}
/// Specify when to perform the real-time scan. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RealTimeScan {
    #[serde(rename = "read-only")]
    ReadOnly,
    #[serde(rename = "write-only")]
    WriteOnly,
    #[serde(rename = "read-write")]
    ReadWrite,
}
/// The action to perform when a virus is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForVirus {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "clean")]
    Clean,
    #[serde(rename = "deny-access")]
    DenyAccess,
}
/// The action to perform when a trojan is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForTrojans {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "deny-access")]
    DenyAccess,
}
/// The action to perform when a packer is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForPacker {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "deny-access")]
    DenyAccess,
}
/// The action to perform when spyware is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForSpyware {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "deny-access")]
    DenyAccess,
}
/// The action to take when other threats are detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForOtherThreats {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "clean")]
    Clean,
    #[serde(rename = "deny-access")]
    DenyAccess,
}
/// The action to take when cookies are detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForCookies {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
}
/// The action to take when a CVE exploit is detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForCve {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "deny-access")]
    DenyAccess,
}
/// The action to take when malware identified with heuristics are detected. Searchable as Choice. Available when 'customScanActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForHeuristics {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "deny-access")]
    DenyAccess,
}
/// The action to take when possible malware is detected. Searchable as Choice. Available when 'customRemediationActionsEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForPossibleMalware {
    #[serde(rename = "active-action")]
    ActiveAction,
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "deny-access")]
    DenyAccess,
}
/// The action to take when suspicious activity and unauthorized changes are detected. Searchable as Choice. Available when 'behaviorMonitoringEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForBehaviorMonitoring {
    #[serde(rename = "active-action")]
    ActiveAction,
    #[serde(rename = "pass")]
    Pass,
}
/// The action to take when malware identified with machine learning is detected. Searchable as Choice. Available when 'machineLearningEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForMachineLearning {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "quarantine")]
    Quarantine,
}
/// The action to take when malware identified with AMSI protection is detected. Available when 'amsiScanEnabled' is true.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanActionForAmsi {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "terminate")]
    Terminate,
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CpuUsage {
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
}
