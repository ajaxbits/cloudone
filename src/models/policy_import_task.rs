/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// PolicyImportTask : Describes the task of policy import.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyImportTask {
    /// Policy content zip and encoded by base64, write only.
    #[serde(rename = "policyContent", skip_serializing_if = "Option::is_none")]
    pub policy_content: Option<String>,
    /// status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Timestamp of the created time, in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i64>,
    /// Timestamp of the last updated time, in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "lastUpdated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<i64>,
    /// Policy mappings on Workload Security
    #[serde(rename = "policyMappings", skip_serializing_if = "Option::is_none")]
    pub policy_mappings: Option<Vec<crate::models::PolicyMapping>>,
    /// Type of import failed
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<i32>,
    /// ID of the PolicyImportTask.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
    /// GUID of the task. Searchable as String.
    #[serde(rename = "taskGUID", skip_serializing_if = "Option::is_none")]
    pub task_guid: Option<String>,
    /// (Optional) Source Deep Security Manager hostname. Searchable as String.
    #[serde(rename = "sourceHostName", skip_serializing_if = "Option::is_none")]
    pub source_host_name: Option<String>,
}

impl PolicyImportTask {
    /// Describes the task of policy import.
    pub fn new() -> PolicyImportTask {
        PolicyImportTask {
            policy_content: None,
            status: None,
            created: None,
            last_updated: None,
            policy_mappings: None,
            error_code: None,
            ID: None,
            task_guid: None,
            source_host_name: None,
        }
    }
}

/// status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in-progress")]
    InProgress,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "failed")]
    Failed,
}
