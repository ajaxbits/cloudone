/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// LogInspectionRule : Contains string matching and threshold to trigger alerts as well as group information for LogInspectionRules.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogInspectionRule {
    /// Name of the LogInspectionRule. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the LogInspectionRule that appears in search results, and on the General tab in the Deep Security Manager user interface. Searchable as String.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Minimum Deep Security Agent version required by the LogInspectionRule. Searchable as String.
    #[serde(
        rename = "minimumAgentVersion",
        skip_serializing_if = "Option::is_none"
    )]
    pub minimum_agent_version: Option<String>,
    /// Minimumn Deep Security Manager version required by the LogInspectionRule. Searchable as String.
    #[serde(
        rename = "minimumManagerVersion",
        skip_serializing_if = "Option::is_none"
    )]
    pub minimum_manager_version: Option<String>,
    /// Type of the LogInspectionRule. The value 'Defined' is used for LogInspectionRules provided by Trend Micro. Searchable as String.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// Creation timestamp of the LogInspectionRule, measured in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "originalIssue", skip_serializing_if = "Option::is_none")]
    pub original_issue: Option<i64>,
    /// Update timestamp of the LogInspectionRule, measured in milliseconds since epoch. Searchable as Date.
    #[serde(rename = "lastUpdated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<i64>,
    /// Indentifier of the LogInspectionRule used in the Deep Security Manager user interface. Searchable as String.
    #[serde(rename = "identifier", skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    /// Template used to create this rule.
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<Template>,
    /// ID of the LogInspectionRule sent to the Deep Security Agent. The values 100000 - 109999 are reserved for user-definded rules.
    #[serde(rename = "ruleID", skip_serializing_if = "Option::is_none")]
    pub rule_id: Option<i32>,
    /// Log level of the LogInspectionRule indicates severity of attack. Level 0 is the least severe and will not log an event. Level 15 is the most severe.
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<i32>,
    /// Groups that the LogInspectionRule is assigned to, separated by commas. Useful when dependency is used as it's possible to create a LogInspectionRule that fires when another LogInspectionRule belonging to a specific group fires.
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// Description of the LogInspectionRule that appears on events and the Content tab in the Deep Security Manager user interface. Alternatively, you can configure this by inserting a description in 'ruleXML'.
    #[serde(rename = "ruleDescription", skip_serializing_if = "Option::is_none")]
    pub rule_description: Option<String>,
    /// Regular expression pattern the LogInspectionRule will look for in the logs. The rule will be triggered on a match. Open Source HIDS SEcurity (OSSEC) regular expression syntax is supported, see http://www.ossec.net/docs/syntax/regex.html.
    #[serde(rename = "pattern", skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    /// Pattern the LogInspectionRule will look for in the logs. The string matching pattern is faster than the regex pattern.
    #[serde(rename = "patternType", skip_serializing_if = "Option::is_none")]
    pub pattern_type: Option<PatternType>,
    /// Indicates if a dependant rule or dependency group is set or not. If set, the LogInspectionRule will only log an event if the dependency is triggered. Available for user-defined rules.
    #[serde(rename = "dependency", skip_serializing_if = "Option::is_none")]
    pub dependency: Option<Dependency>,
    /// If dependency is configured, the ID of the rule that this rule is dependant on. Ignored if the rule is from Trend Micro, which uses `dependsOnRuleIDs` instead.
    #[serde(rename = "dependencyRuleID", skip_serializing_if = "Option::is_none")]
    pub dependency_rule_id: Option<i32>,
    /// If dependency is configured, the dependancy groups that this rule is dependant on.
    #[serde(rename = "dependencyGroup", skip_serializing_if = "Option::is_none")]
    pub dependency_group: Option<String>,
    /// Number of times the dependant rule has to match within a specific time frame before the rule is triggered.
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<i32>,
    /// Time period for the frequency of LogInspectionRule triggers that will generate an event, in seconds.
    #[serde(rename = "timeFrame", skip_serializing_if = "Option::is_none")]
    pub time_frame: Option<i32>,
    /// LogInspectionRule in an XML format. For information on the XML format, see http://ossec-docs.readthedocs.io/en/latest/syntax/head_rules.html
    #[serde(rename = "ruleXML", skip_serializing_if = "Option::is_none")]
    pub rule_xml: Option<String>,
    #[serde(rename = "logFiles", skip_serializing_if = "Option::is_none")]
    pub log_files: Option<Box<crate::models::LogFiles>>,
    /// Controls whether to raise an alert when a LogInspectionRule logs an event. Use true to raise an alert. Searchable as Boolean.
    #[serde(rename = "alertEnabled", skip_serializing_if = "Option::is_none")]
    pub alert_enabled: Option<bool>,
    /// Severity level that will trigger an alert. Ignored unless `ruleXML` contains multiple rules with different severities, and so you must indicate which severity level to use. Searchable as Numeric.
    #[serde(
        rename = "alertMinimumSeverity",
        skip_serializing_if = "Option::is_none"
    )]
    pub alert_minimum_severity: Option<i32>,
    /// Indicates whether recommendation scans consider the LogInspectionRule. Can be set to enabled or ignored. Custom rules cannot be recommended. Searchable as Choice.
    #[serde(
        rename = "recommendationsMode",
        skip_serializing_if = "Option::is_none"
    )]
    pub recommendations_mode: Option<RecommendationsMode>,
    /// Order in which LogInspectionRules are sent to the Deep Security Agent. Log inspeciton rules are sent in ascending order. Valid values are between 10000 and 20000.
    #[serde(rename = "sortOrder", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<i32>,
    /// Indicates whether this LogInspectionRule can be allocated without allocating any additional LogInspectionRules. Ignored if the rule is user-defined, which uses `dependency` instead.
    #[serde(rename = "canBeAssignedAlone", skip_serializing_if = "Option::is_none")]
    pub can_be_assigned_alone: Option<bool>,
    /// IDs of LogInspectionRules, separated by commas, that are required by this rule. Ignored if the rule is user-defined, which uses `dependencyRuleID` or `dependencyGroup` instead.
    #[serde(rename = "dependsOnRuleIDs", skip_serializing_if = "Option::is_none")]
    pub depends_on_rule_ids: Option<Vec<i32>>,
    /// ID of the LogInspectionRule. This number is set automatically. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
}

impl LogInspectionRule {
    /// Contains string matching and threshold to trigger alerts as well as group information for LogInspectionRules.
    pub fn new() -> LogInspectionRule {
        LogInspectionRule {
            name: None,
            description: None,
            minimum_agent_version: None,
            minimum_manager_version: None,
            _type: None,
            original_issue: None,
            last_updated: None,
            identifier: None,
            template: None,
            rule_id: None,
            level: None,
            groups: None,
            rule_description: None,
            pattern: None,
            pattern_type: None,
            dependency: None,
            dependency_rule_id: None,
            dependency_group: None,
            frequency: None,
            time_frame: None,
            rule_xml: None,
            log_files: None,
            alert_enabled: None,
            alert_minimum_severity: None,
            recommendations_mode: None,
            sort_order: None,
            can_be_assigned_alone: None,
            depends_on_rule_ids: None,
            ID: None,
        }
    }
}

/// Template used to create this rule.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Template {
    #[serde(rename = "basic-rule")]
    BasicRule,
    #[serde(rename = "custom")]
    Custom,
}
/// Pattern the LogInspectionRule will look for in the logs. The string matching pattern is faster than the regex pattern.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PatternType {
    #[serde(rename = "string")]
    String,
    #[serde(rename = "regex")]
    Regex,
}
/// Indicates if a dependant rule or dependency group is set or not. If set, the LogInspectionRule will only log an event if the dependency is triggered. Available for user-defined rules.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Dependency {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "rule")]
    Rule,
    #[serde(rename = "group")]
    Group,
}
/// Indicates whether recommendation scans consider the LogInspectionRule. Can be set to enabled or ignored. Custom rules cannot be recommended. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RecommendationsMode {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "ignored")]
    Ignored,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "disabled")]
    Disabled,
}
