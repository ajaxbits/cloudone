/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// EventBasedTask : Defines an event based task. Events based tasks automatically perform specific Deep Security Manager triggered by an event.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventBasedTask {
    /// Name of event based task. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type of scheduled task. Searchable as Choice.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Indicates whether or not the event based task is enabled. Searchable as Boolean.
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The last time this event based task was run, or null if never run. Searchable as Date.
    #[serde(rename = "lastRunTime", skip_serializing_if = "Option::is_none")]
    pub last_run_time: Option<i64>,
    /// List of actions to perform when an event based task condition is met.
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<crate::models::EventBasedTaskAction>>,
    /// List of conditions that must be met in order for an event based task to run its actions.
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<crate::models::EventBasedTaskCondition>>,
    /// Event based task identifier. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
}

impl EventBasedTask {
    /// Defines an event based task. Events based tasks automatically perform specific Deep Security Manager triggered by an event.
    pub fn new() -> EventBasedTask {
        EventBasedTask {
            name: None,
            _type: None,
            enabled: None,
            last_run_time: None,
            actions: None,
            conditions: None,
            ID: None,
        }
    }
}

/// Type of scheduled task. Searchable as Choice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "computer-created-by-system")]
    ComputerCreatedBySystem,
    #[serde(rename = "computer-moved-by-system")]
    ComputerMovedBySystem,
    #[serde(rename = "agent-initiated-activation")]
    AgentInitiatedActivation,
    #[serde(rename = "agent-ip-changed")]
    AgentIpChanged,
    #[serde(rename = "nsx-protection-changed")]
    NsxProtectionChanged,
    #[serde(rename = "computer-powered-on-by-system")]
    ComputerPoweredOnBySystem,
}
