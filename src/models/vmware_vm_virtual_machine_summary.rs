/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// VmwareVmVirtualMachineSummary : Details of a VMWare virtual machine.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmwareVmVirtualMachineSummary {
    /// Operating system, for example: \"Microsoft Windows Server 2012 (64-bit)\". Searchable as String.
    #[serde(rename = "operatingSystem", skip_serializing_if = "Option::is_none")]
    pub operating_system: Option<String>,
    /// Memory allocation, for example: \"12,288 MB\".
    #[serde(rename = "memory", skip_serializing_if = "Option::is_none")]
    pub memory: Option<String>,
    /// VMware tools status, for example: \"OK\".
    #[serde(rename = "vmwareTools", skip_serializing_if = "Option::is_none")]
    pub vmware_tools: Option<String>,
    /// BIOS UUID, for example: \"421e1137-5c49-56e4-246d-9bf7637e69f5\". Searchable as String.
    #[serde(rename = "biosUUID", skip_serializing_if = "Option::is_none")]
    pub bios_uuid: Option<String>,
    /// Power state, for example: \"Powered On\".
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Notes associated with the VM.
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<Vec<String>>,
    /// Number and type of CPUs, for example: \"4 vCPU\". Searchable as Numeric.
    #[serde(rename = "CPU", skip_serializing_if = "Option::is_none")]
    pub CPU: Option<String>,
    #[serde(rename = "IPAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "DNSName", skip_serializing_if = "Option::is_none")]
    pub dns_name: Option<String>,
    #[serde(rename = "vCenterUUID", skip_serializing_if = "Option::is_none")]
    pub v_center_uuid: Option<String>,
    #[serde(rename = "NSXSecurityGroups", skip_serializing_if = "Option::is_none")]
    pub nsx_security_groups: Option<Vec<String>>,
}

impl VmwareVmVirtualMachineSummary {
    /// Details of a VMWare virtual machine.
    pub fn new() -> VmwareVmVirtualMachineSummary {
        VmwareVmVirtualMachineSummary {
            operating_system: None,
            memory: None,
            vmware_tools: None,
            bios_uuid: None,
            state: None,
            notes: None,
            CPU: None,
            ip_address: None,
            dns_name: None,
            v_center_uuid: None,
            nsx_security_groups: None,
        }
    }
}
