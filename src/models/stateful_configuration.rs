/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 *
 * Generated by: https://openapi-generator.tech
 */

/// StatefulConfiguration : Stateful configurations of the interface.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatefulConfiguration {
    /// Name of the stateful configuration. Searchable as String.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the stateful configuration. Searchable as String.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Controls if fragmented packets are denied. Set to true to deny fragmented packets. Searchable as Boolean.
    #[serde(
        rename = "denyFragmentedPacketsEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub deny_fragmented_packets_enabled: Option<bool>,
    /// Controls if TCP CWR, ECE flags are denied. Set to true to enable CWR or ECE flags. Searchable as Boolean.
    #[serde(
        rename = "denyPacketsContainingCwrOrEceEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub deny_packets_containing_cwr_or_ece_enabled: Option<bool>,
    /// Maximum allowed incoming connections. Searchable as Numeric.
    #[serde(
        rename = "maxIncomingConnections",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_incoming_connections: Option<i32>,
    /// Maximum allowed outgoing connections. Searchable as Numeric.
    #[serde(
        rename = "maxOutgoingConnections",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_outgoing_connections: Option<i32>,
    /// Maximum allowed half open connections. Searchable as Numeric.
    #[serde(
        rename = "maxHalfOpenConnections",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_half_open_connections: Option<i32>,
    #[serde(
        rename = "tcpstatefulInspectionEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub tcpstateful_inspection_enabled: Option<bool>,
    #[serde(
        rename = "tcpstatefulLoggingEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub tcpstateful_logging_enabled: Option<bool>,
    #[serde(
        rename = "udpstatefulInspectionEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub udpstateful_inspection_enabled: Option<bool>,
    #[serde(
        rename = "udpstatefulLoggingEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub udpstateful_logging_enabled: Option<bool>,
    #[serde(
        rename = "icmpstatefulInspectionEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub icmpstateful_inspection_enabled: Option<bool>,
    #[serde(
        rename = "icmpstatefulLoggingEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub icmpstateful_logging_enabled: Option<bool>,
    /// ID of the stateful configuration. Searchable as ID.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<i32>,
}

impl StatefulConfiguration {
    /// Stateful configurations of the interface.
    pub fn new() -> StatefulConfiguration {
        StatefulConfiguration {
            name: None,
            description: None,
            deny_fragmented_packets_enabled: None,
            deny_packets_containing_cwr_or_ece_enabled: None,
            max_incoming_connections: None,
            max_outgoing_connections: None,
            max_half_open_connections: None,
            tcpstateful_inspection_enabled: None,
            tcpstateful_logging_enabled: None,
            udpstateful_inspection_enabled: None,
            udpstateful_logging_enabled: None,
            icmpstateful_inspection_enabled: None,
            icmpstateful_logging_enabled: None,
            ID: None,
        }
    }
}
