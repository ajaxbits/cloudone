/*
 * Trend Micro Workload Security API
 *
 * Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 50.0.827
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Rights : Administrator rights details.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Rights {
    #[serde(rename = "platformRights", skip_serializing_if = "Option::is_none")]
    pub platform_rights: Option<Box<crate::models::PlatformRights>>,
    #[serde(rename = "antiMalwareRights", skip_serializing_if = "Option::is_none")]
    pub anti_malware_rights: Option<Box<crate::models::AntiMalwareRights>>,
    #[serde(rename = "webReputationRights", skip_serializing_if = "Option::is_none")]
    pub web_reputation_rights: Option<Box<crate::models::WebReputationRights>>,
    #[serde(rename = "sensingModeRights", skip_serializing_if = "Option::is_none")]
    pub sensing_mode_rights: Option<Box<crate::models::SensingModeRights>>,
    #[serde(rename = "firewallRights", skip_serializing_if = "Option::is_none")]
    pub firewall_rights: Option<Box<crate::models::FirewallRights>>,
    #[serde(rename = "intrusionPreventionRights", skip_serializing_if = "Option::is_none")]
    pub intrusion_prevention_rights: Option<Box<crate::models::IntrusionPreventionRights>>,
    #[serde(rename = "integrityMonitoringRights", skip_serializing_if = "Option::is_none")]
    pub integrity_monitoring_rights: Option<Box<crate::models::IntegrityMonitoringRights>>,
    #[serde(rename = "logInspectionRights", skip_serializing_if = "Option::is_none")]
    pub log_inspection_rights: Option<Box<crate::models::LogInspectionRights>>,
    #[serde(rename = "applicationControlRights", skip_serializing_if = "Option::is_none")]
    pub application_control_rights: Option<Box<crate::models::ApplicationControlRights>>,
    #[serde(rename = "hostedServiceRights", skip_serializing_if = "Option::is_none")]
    pub hosted_service_rights: Option<Box<crate::models::HostedServiceRights>>,
}

impl Rights {
    /// Administrator rights details.
    pub fn new() -> Rights {
        Rights {
            platform_rights: None,
            anti_malware_rights: None,
            web_reputation_rights: None,
            sensing_mode_rights: None,
            firewall_rights: None,
            intrusion_prevention_rights: None,
            integrity_monitoring_rights: None,
            log_inspection_rights: None,
            application_control_rights: None,
            hosted_service_rights: None,
        }
    }
}


